include(${CTEST_SCRIPT_DIRECTORY}/project_name.cmake)

if(NOT DEFINED CTEST_PROJECT_NAME)
	message(FATAL_ERROR "CTEST_PROJECT_NAME not defined!")
endif()

set(CTEST_SOURCE_DIRECTORY "${CTEST_SCRIPT_DIRECTORY}/../../")
set(CTEST_BINARY_DIRECTORY "${CTEST_SCRIPT_DIRECTORY}/../../../../../Builds/build_1")

MESSAGE ( "Actual path is ${CTEST_SOURCE_DIRECTORY}" )
MESSAGE ( "Actual binary path is ${CTEST_BINARY_DIRECTORY}" )

#Set the compiler
if(DEFINED Compiler)
	message(STATUS "Compiler: ${Compiler}")
	if(${Compiler} MATCHES "VS2008")
		set(CTEST_CMAKE_GENERATOR "Visual Studio 9 2008")
	elseif(${Compiler} MATCHES "VS2010")
		set(CTEST_CMAKE_GENERATOR "Visual Studio 10 2010")
	elseif(${Compiler} MATCHES "VS2012")
		set(CTEST_CMAKE_GENERATOR "Visual Studio 11 2012")
	elseif(${Compiler} MATCHES "VS2013")
		set(CTEST_CMAKE_GENERATOR "Visual Studio 12 2013")
	elseif(${Compiler} MATCHES "VS2015")
		set(CTEST_CMAKE_GENERATOR "Visual Studio 14 2015")
	elseif(${Compiler} MATCHES "VS2017")
		set(CTEST_CMAKE_GENERATOR "Visual Studio 15 2017")
	elseif(${Compiler} MATCHES "VS2019")
		set(CTEST_CMAKE_GENERATOR "Visual Studio 16 2019")
	endif()
elseif(DEFINED Compiler)
	message(FATAL_ERROR "Missing compiler version!")
endif()


#Set the platform

if(DEFINED Platform)
	message(STATUS "Platform: ${Platform}")
	if(${Platform} MATCHES "x64")
		if(${Compiler} MATCHES "VS2019")
			set(CTEST_CMAKE_GENERATOR "${CTEST_CMAKE_GENERATOR}") 
		else()
			set(CTEST_CMAKE_GENERATOR "${CTEST_CMAKE_GENERATOR} x64") 
		endif()
	elseif(${Platform} MATCHES "Win32")
		set(CTEST_CMAKE_GENERATOR "${CTEST_CMAKE_GENERATOR} Win32")
	elseif(${Platform} MATCHES "ARM")
		set(CTEST_CMAKE_GENERATOR "${CTEST_CMAKE_GENERATOR} ARM")
	elseif(${Platform} MATCHES "ARM64")
		set(CTEST_CMAKE_GENERATOR "${CTEST_CMAKE_GENERATOR} ARM64")
	elseif(${Platform} MATCHES "ARM64EC")
		set(CTEST_CMAKE_GENERATOR "${CTEST_CMAKE_GENERATOR} ARM64EC")
	endif()
elseif(DEFINED Platform)
	message(FATAL_ERROR "Missing platform!")
endif()

#Set the build config
if(DEFINED BuildType)
	message(STATUS "Build type: ${BuildType}")
	if(${BuildType} MATCHES "Debug")
		set(CTEST_CONFIGURATION_TYPE Debug)
	elseif(${BuildType} MATCHES "Release")
		set(CTEST_CONFIGURATION_TYPE Release)
	endif()
elseif(DEFINED BuildType)
	message(FATAL_ERROR "Missing configuration!")
endif()
